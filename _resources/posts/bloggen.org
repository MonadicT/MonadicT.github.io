#+title: Static Blog Site Generator
#+summary: Descrption of elisp code which generates this blog site from a set of org-mode files,
#+tags: emacs, elisp, blog
#+publish-date: 2017-10-01
#+export_file_name: ../../bloggen.html
#+options: toc:nil num:nil

* Introduction

** Org document processing
*** Parse org document and build keywords
#+begin_src elisp :noweb-ref util-fn :eval no
  (defun build-keywords()
    (org-element-map
        (org-element-parse-buffer 'element)
        'keyword
      (lambda (kw)
        (cons (org-element-property :key kw)
              (org-element-property :value kw)))))
#+end_src

*** Get keyword
#+begin_src elisp :noweb-ref util-fn :eval no
  (defun get-keyword(keywords key &optional default-value)
    (if-let ((kw-value (cdr (assoc-ignore-case key keywords))))
    kw-value
      default-value))
#+END_SRC

*** Process template
Template should be a bunch of =#+include= directives. Each of these is
exported to a HTML div element and the whole thing is wrapped into a
HTML document.

#+begin_src elisp :noweb-ref util-fn :eval no
  (defun process-template (template org-file)
    (with-temp-buffer
      (find-file template)
      (org-element-map
          (org-element-parse-buffer 'element)
          'keyword
        ;;org-element-all-elements
        (lambda (o)
          (let* ((key (org-element-property :key o))
                 (value (org-element-property :value o)))
            (if (eq key "include")
                (message value)))))))
#+END_SRC

*** Process-org-doc

'(add-to-list 'load-path "~/.emacs.d")
'(add-to-list 'load-path "~/.emacs.d/elpa")
'(add-to-list 'load-path "~/.emacs.d/elpa/clojure-mode-2.1.1")
'(require 'htmlize)
'(require 'org)
'(require 'org-list)
'(require 'ox-html)
'(require 'ob)
'(global-font-lock-mode 1)
'(require 'clojure-mode)
'(set-face-foreground 'font-lock-string-face "#afafff")
'(set-face-foreground 'font-lock-keyword-face "#ff5f00")
'(set-face-foreground 'font-lock-function-name-face "#d7af00")
'(set-face-foreground 'font-lock-builtin-face "#afd700")
'(set-face-foreground 'font-lock-comment-face "#008787")
(find-file f)
(progn (org-html-export-as-html nil nil nil t nil)
(with-current-buffer \"*Org HTML Export*\" (princ (org-no-properties (buffer-string)))))

#+begin_src elisp :noweb-ref util-fn :eval no
  (defun process-org-doc()
    (let* ((keywords (build-keywords))
           (content-type (get-keyword keywords "content-type"))
           (template (get-keyword keywords "template")))
      (message template)))
  (process-org-doc)
#+END_SRC

#+begin_src elisp :noweb-ref util-fn :eval no
  (defun xxxextract-post-body(post)
    (let (content)
      (with-temp-buffer
        (find-file (concat posts-dir "/" post))
        (org-html-export-as-html nil nil nil t nil)
        (with-current-buffer
            "*Org HTML Export*"
          (setq content (org-no-properties (buffer-string)))
          (kill-buffer (current-buffer))))
      (kill-buffer (current-buffer))
      content))

  (defun extract-post-body(buffer)
    (let (content)
      (org-html-export-as-html nil nil nil t nil)
      (with-current-buffer
          "*Org HTML Export*"
        (setq content (org-no-properties (buffer-string))))
      (kill-buffer "*Org HTML Export*")
      content))

  (let ((post-body  (extract-post-body (current-buffer))))
    (with-temp-file "~/post.html"
      (insert post-body)))
#+end_src


** Post files
Returns list of org files from post directory.
#+begin_src elisp :noweb-ref util-fn :eval no :results silent
  (defconst posts-dir "~/stuff/github/MonadicT.github.io/_resources/posts")
  (defun post-org-files ()
    (directory-files posts-dir nil "[a-zA-Z0-9]+.*\.org$"))
#+end_src


** List of posts
Examines the list of post files for =TITLE= and =PUBLISH-TITLE=
keywords. The posts are ordered by descending order of
=PUBLISH-TITLE=.

#+begin_src elisp :noweb-ref util-fn :eval no

(defun post-list()
  (let ((posts (mapcar
                (lambda (org-file)
                  (with-temp-buffer
                    (find-file (concat posts-dir "/" org-file))
                    (let ((key-val-list
                           (org-element-map
                               (org-element-parse-buffer 'element)
                               'keyword
                             ;; org-element-all-elements
                             (lambda (o)
                               (let* ((key (org-element-property :key o))
                                      (value (org-element-property :value o)))
                                 (list key value))))))
                      ;;(kill-buffer (current-buffer))
                      (cons (list "FILE" org-file) key-val-list))))
                (post-org-files))))
    posts))
#+END_SRC

** Select published posts
#+begin_src elisp :noweb-ref XXX :eval no
  (defun select-published-posts(posts)
    (-filter (lambda (x) (assoc "PUBLISH-DATE" x)) posts))

;;(select-published-posts '((("FILE" "2017-07-18-site-builder.org") ("TITLE" "Static Site Builder") ("TAGS" "lisp, HTML") ("PROPERTY" "header-args:elisp :tangle ssb.el")) (("FILE" "bloghome.org") ("TITLE" "Blog template") ("TAGS" "") ("OPTIONS" "toc:nil num:nil")) (("FILE" "treepat.org") ("TITLE" "Tree patter nmatching") ("TAGS" "pattern matching") ("PROPERTY" "header-args:elisp :tangle tpat.el")) (("FILE" "bloggen.org") ("TITLE" "Blog template") ("TAGS" "emacs elisp blog") ("PUBLISH-DATE" "2017-10-01") ("OPTIONS" "toc:nil num:nil")) (("FILE" "2017-06-02-html-template-processor.org") ("TITLE" "Yet another template language and processor") ("TAGS" "template, lisp, HTML, DSL") ("PUBLISH-DATE" "2017-06-02") ("SUMMARY" "A DSL for HTML documents implemented in elisp, org-mode.") ("PROPERTY" "header-args:elisp :tangle \"~/.emacs.d/lisp/yatl.el\"") ("RESULTS" "")) (("FILE" "2016-11-27-ParsecParser.org") ("TITLE" "Writing a parser using Parsec") ("TAGS" "Haskell, Parsec, DSL") ("PUBLISH-DATE" "2016-11-27") ("OPTIONS" "toc:nil num:nil tex:t LaTeX:t") ("LATEX_HEADER_EXTRA" "\\usepackage{showexpl, url, tikz, xcolor}")) (("FILE" "2016-06-19-Blogging.org") ("TITLE" "Blogging with emacs and org-mode") ("TAGS" "emacs, Jekyll, Static") ("PUBLISH-DATE" "2016-06-19") ("OPTIONS" "toc:nil num:nil tex:t LaTeX:t") ("LATEX_HEADER_EXTRA" "\\usepackage{showexpl, url, tikz, xcolor}") ("RESULTS" "")) (("FILE" "2015-05-20-xmonad.org") ("TITLE" "Configuring xmonad") ("TAGS" "tip, X, xmonad") ("PUBLISH-DATE" "2015-05-20") ("OPTIONS" "toc:nil num:nil tex:t") ("LATEX_HEADER" "\\usepackage{tikz,showexpl}")) (("FILE" "2014-03-08-safeguarding-secrets-with-gnupg.org") ("TITLE" "Safeguarding Secrets with GnuPG") ("TAGS" "tip, emacs") ("PUBLISH-DATE" "2014-03-08") ("OPTIONS" "toc:nil num:nil"))))
#+end_src

** Sort posts in descending order of publish date
#+begin_src elisp :noweb-ref util-fn :eval no
  (defun sort-posts-by-publish-date(posts)
    (sort
     posts
     (lambda(x y)
       (print (cadr (assoc "PUBLISH-DATE" x)))
       (string-greaterp
        (cadr (assoc "PUBLISH-DATE" x))
        (cadr (assoc "PUBLISH-DATE" y))))))
#+end_src

* Home page template
** Font
#+BEGIN_SRC elisp :eval no :noweb-ref fonts
   (link@href=http://fonts.googleapis.com/css?family=Merriweather&\#8217@rel=stylesheet@type=text/css)
#+END_SRC

** Styles
CSS Styles used in this blog are managed using interpolated
strings. The code below is an association list which is used to build
CSS string later.

#+begin_src elisp :noweb-ref css-consts :eval no
  '(("dark-primary-color"    . "#616161")
    ("default-primary-color" . "#9E9E9E")
    ("light-primary-color"   . "#F5F5F5")
    ("text-primary-color"    . "#212121")
    ("accent-color"          . "#FF5722")
    ("primary-text-color"    . "#212121")
    ("secondary-text-color"  . "#757575")
    ("accent-text-color"     . "#FF5722")
    ("divider-color"         . "#BDBDBD"))
#+end_src

Construction of CSS string.

#+BEGIN_SRC emacs-lisp :noweb-ref styles :noweb yes :eval no
  (s-format
   "
      .dark-primary-color    { background: ${dark-primary-color}; }
      .default-primary-color { background: ${default-primary-color}; }
      .light-primary-color   { background: ${light-primary-color}; }
      .text-primary-color    { color: ${text-primary-color}; }
      .accent-color          { background: ${accent-color}; }
      .primary-text-color    { color: ${primary-text-color}; }
      .secondary-text-color  { color: ${secondary-text-color}; }
      .accent-text-color     { color: ${accent-text-color}; }
      .divider-color         { border-color: ${divider-color}; }

      ,* { font-family: ‘Merriweather’, Georgia, serif; }
      html { clear: both; height: 100%; width: 100% }
      body { margin: 0; padding: 0; height: 100%; width: 100%; display: flex; flex-direction: column }
      .header { position: relative; padding: 1em; margin-left: 20%; margin-right: 20% }
      .site-links { padding-top: 0.5em; }
      .site-links > a { font-size: 125%; text-decoration: none; color: ${accent-color}; }
      .content { padding: 1em; margin-left: 20%; margin-right: 20%; flex: 1;
                 display: flex; flex-direction: row; }
      .content-main { flex: 4; }
      .divider { flex: 0; background-color: ${divider-color}; }
      .sidebar { flex: 1; border-left: 1px solid; padding: 0.5em; }
      .footer { padding: 0.5em; margin-left: 20%; margin-right: 20%; text-align: center; }
      .title { font-size: 3.5em; font-weight: bold }
      .search-box { position: absolute; top: .5em; right: 1em; width: 40%; }
      .social-media { position: absolute; bottom: .2em; right: 0.5em; display:
                      flex; flex-direction: row; align-items: center; }
      .centered { text-align: center; }
      .blurb { padding-top: 1em; }
      .content-header { font-weight: bold; font-size: 2.5em; padding-bottom: 0.5em; }
      .post-title { color: ${text-primary-color}; font-size: 125%; }
      .post-summary { color: ${secondary-text-color}; padding-top: 0.5em; padding-bottom: 1em; }
      .post-tags { font-weight: xbold; color: ${secondary-text-color}; padding-bottom: 0.5em; }
      .pub-date { font-weight: xbold; color: ${secondary-text-color}; padding-bottom: 2em; }
      .anchor-plain { text-decoration: none; color: inherit; font-weight: bold; }
      a:hover {  color: ${accent-color}; opacity: 50%; }
      "
   'aget
   <<css-consts>>)

#+END_SRC

** Scripts
 #+BEGIN_SRC elisp :noweb-ref scripts :eval no
 "
   (function() {
     var cx = '006684519581021422604:pp6qplctmrc';
     var gcse = document.createElement('script');
     gcse.type = 'text/javascript';
     gcse.async = true;
     gcse.src = 'https://cse.google.com/cse.js?cx=' + cx;
     var s = document.getElementsByTagName('script')[0];
     s.parentNode.insertBefore(gcse, s);
   })();
 "
 #+END_SRC

** Head
#+BEGIN_SRC elisp :noweb-ref head :eval no
   (head
    <<fonts>>
    (style
     <<styles>>)
    (script
     <<scripts>>))
#+END_SRC

** Search
 #+BEGIN_SRC elisp :noweb-ref search :eval no
 (span.search-box "<gcse:search></gcse:search>")
 #+END_SRC
** Social media
*** Twitter link.
 #+BEGIN_SRC elisp :noweb-ref twitter :eval no
   "
   <a target=\"_new\" href=\"https://twitter.com/MonadicT\">
   <span style={background-color: white; height:48px;width:48px;border-radius:24px}></span>
   <img height=\"48px\" width=\"48px\"
        title=\"Visit my Twitter page\"
        src=\"twitter.png\"/></a>
   "
 #+END_SRC

*** Github link
 "<a id=\"github-link\" target=\"_new\"
     href=\"https://github.com/MonadicT\"><img id=\"github-logo\"
     height=\"48\" width=\"48\" src=\"github.png\"/></a>"

 #+BEGIN_SRC elisp :noweb-ref github :eval no
 "
 <a href='//github.com/MonadicT'
 style='text-decoration:none;'
 target='_top'>
 <img alt='Github'
 src='http://monadict.github.io/images/GitHub-Mark-32px.png'
 style='border:0;width:32px;height:32px;'
 title='GitHub'>
 </a>
 "
 #+END_SRC

*** Container
 #+BEGIN_SRC elisp :noweb-ref social-media :eval no
   (span.social-media
    <<github>>
    <<twitter>>
    )
 #+END_SRC

** Site links
 #+BEGIN_SRC elisp :noweb-ref site-links :eval no
 (div.site-links
   (a@href=/ "Articles")
   (a@href=/ "Resume")
   (a@href=/ "About"))
 #+END_SRC

** Posts
#+BEGIN_SRC elisp :noweb-ref posts-list :eval no
  (mapconcat
   (lambda (l)
     (let ((file (cadr (assoc "FILE" l)))
           (title (cadr (assoc "TITLE" l)))
           (tags (cadr (assoc "TAGS" l)))
           (summary (cadr (assoc "SUMMARY" l)))
           (pub-date (cadr (assoc "PUBLISH-DATE" l))))
       (concat
        "<div class=\"post-title\" ><a class=\"anchor-plain\" href='" file "'>" title "</a></div>"
        (if summary (concat "<div class=\"post-summary\">" summary "</div>"))
        "<div class=\"post-tags\">Tags: " tags "</div>"
        "<div class=\"pub-date\">Published: " pub-date "</div>")))
   (sort-posts-by-publish-date (select-published-posts (post-list)))
   "\n")
#+END_SRC

** Header
 #+BEGIN_SRC elisp :noweb-ref header :eval no
   (div.header.dark-primary-color.accent-text-color
    (span.title "MonadicT")
    <<social-media>>
    <<site-links>>)

 #+END_SRC

** Footer
 #+BEGIN_SRC elisp :noweb-ref footer :eval no
   (div.footer.default-primary-color.text-primary-color
    "&copy; 2013-"
    (format-time-string "%Y")
    "Praki Prakash")
 #+END_SRC

** Content
*** Sidebar
 #+BEGIN_SRC elisp :noweb-ref sidebar :results silent :eval no
   (div.sidebar
    "<img src='http://monadict.github.io/images/praki-outline.png' style='float:left;padding:.5em'/>"
    (div.centered.secondary-text-color "PRAKI PRAKASH")
    (div.blurb.secondary-text-color
     "Chief Architect at <a =class=\"anchor-plain\"
     href=\"www.picarro.com\">Picarro. Inc.</a> With wide-ranging
     experience in managing, guiding and building dependable
     software systems.</p>

     I am a hands-on architect and passionate about
     programming. I strive to build software without incidental
     complexity. I believe in Functional Programming and
     model-driven software development.</p>

     My favorite programming
     languages are Haskell, Lisp (various), SmallTalk, Groovy and
     lately, Rust. I write software in Java, Python and C/C++."))
 #+END_SRC

*** Posts list
 #+BEGIN_SRC elisp :noweb-ref content :eval no
   (div.content.light-primary-color
    (div.content-main
     (div.content-header "Articles")
     <<posts-list>>)
    <<sidebar>>)
 #+END_SRC

** Body
 #+BEGIN_SRC elisp :noweb-ref body :eval no
 (body.default-primary-color
    <<header>>
    <<content>>
    <<footer>>)
 #+END_SRC

** HTML generation
*** Home page
Homepage content is the list of articles rendered using a common site template.

#+BEGIN_SRC elisp :tangle yes :file ~/bloghome.html :noweb yes :results silent
  (require 'yatl)
  (require 's)
  <<util-fn>>
  (yatl-html5
   <<head>>
   <<body>>)
 #+End_SRC
