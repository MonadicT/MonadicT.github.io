<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<rss version="2.0"><channel><title>MonadicT</title><link>http://MonadicT.github.io</link><description></description><item><title>Writing a parser using Parsec</title><link>http://MonadicT.github.io/2016/11/27/ParsecParser/</link><pubDate>Sun, 27 Nov 2016 00:00:00 -0800</pubDate><description>
&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Introduction&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
I need a parser for a simple Domain Specific Language and I am writing
it in Haskell using the Parsec combinator library. My future posts
will show why I am building this parser but in this post, I will focus
on how to construct a parser for an imperative language using Parsec.
&lt;/p&gt;

&lt;p&gt;
I will make no attempt to explain Haskell features except to touch
upon some details of applicatives. There are many resources available on the
Internet for &lt;a href=&quot;http://bfy.tw/Gbf&quot;&gt;learning Haskell&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
The implementation will be using Applicatives which will be easier to
read than one written in a monadic approach. The language I intend to
parse is a context-free grammar (CFG) and applicatives will do just
fine. It is helpful to review type signatures for &lt;code&gt;&amp;lt;$&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt;,
&lt;code&gt;*&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;*&lt;/code&gt; shown below.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-haskell&quot;&gt;:t (&amp;lt;$&amp;gt;)
(&amp;lt;$&amp;gt;) :: Functor f =&amp;gt; (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b

:t (&amp;lt;*&amp;gt;)
(&amp;lt;*&amp;gt;) :: Applicative f =&amp;gt; f (a -&amp;gt; b) -&amp;gt; f a -&amp;gt; f b

:t (&amp;lt;*)
(&amp;lt;*) :: Applicative f =&amp;gt; f a -&amp;gt; f b -&amp;gt; f a

:t (*&amp;gt;)
(*&amp;gt;) :: Applicative f =&amp;gt; f a -&amp;gt; f b -&amp;gt; f b
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;code&gt;&amp;lt;$&amp;gt;&lt;/code&gt; applies a function &lt;code&gt;(a -&amp;gt; b)&lt;/code&gt; to an argument &lt;code&gt;(f a)&lt;/code&gt; in a
computational context and produces a new value &lt;code&gt;(f b)&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;&amp;lt;*&amp;gt;&lt;/code&gt; extracts both the function &lt;code&gt;(a -&amp;gt; b)&lt;/code&gt; and the argument from
context &lt;code&gt;(f a)&lt;/code&gt; producing a new value in &lt;code&gt;(f b)&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;&amp;lt;*&lt;/code&gt; always returns the first argument and &lt;code&gt;*&amp;gt;&lt;/code&gt; the second.
&lt;/p&gt;

&lt;p&gt;
The syntax of the language that our parser will recognize is shown below.
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
script :: sequence of stmts
stmt :: var_decl
    | if_stmt
    | while_stmt
    | for_stmt
    | continue_stmt
    | break_stmt
    | &quot;{&quot; stmt... &quot;}&quot;

var_decl :: ident &quot;:=&quot; expr

bool :: &quot;true&quot; | &quot;false&quot;

expr :: bexpr bool_op bexpr
    | bexpr

bexpr :: rexpr relop rexpr
    | rexpr

rexpr :: term termOp term
    | term

term :: term factor_op factor
    | factor

factor :: ID
    | number
    | string
    | True
    | False
    | &quot;(&quot; expr &quot;)&quot;
    | &quot;+|-&quot; factor
    | ID &quot;(&quot; [exppr [&quot;,&quot; expr]] &quot;)&quot;

term_op :: &quot;+&quot; | &quot;-&quot;

factor_op :: &quot;*&quot; | &quot;/&quot;

if_stmt :: &quot;if&quot; expr stmt | &quot;if&quot; bool_expr stmt &quot;else&quot; stmt

while_stmt :: &quot;while&quot; expr stmt

for_stmt :: &quot;for&quot; ID stmt

break_stmt :: &quot;break&quot;

continue_stmt :: &quot;continue&quot;
&lt;/pre&gt;

&lt;p&gt;
The result of parsing will be an abstract syntax tree (AST). In
further posts, I will implement evaluation of the tree or use it
generate code.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Implementation&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
Using Parsec in applicative style leads to remarkably concise and
simple implementation.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;Module declaration&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;p&gt;
Lists exports from this module. We export lower-level parse functions
for testing purposes.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-haskell&quot;&gt;module Parser (Expr(..), Stmt(..), dslP, parse, exprP, stmtP) where
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-2&quot;&gt;Imports&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;p&gt;
Notable imports are Parsec and friends. We also import some functions
from &lt;code&gt;Control.Applicative&lt;/code&gt;.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-haskell&quot;&gt;import Control.Applicative (liftA2, pure, (&amp;lt;*&amp;gt;), (&amp;lt;$&amp;gt;), (&amp;lt;*), (*&amp;gt;))
import Text.Parsec
import Text.Parsec.String (Parser)
import Text.ParserCombinators.Parsec.Char (digit, letter,
       alphaNum, lower, upper)
import Text.ParserCombinators.Parsec.Language (emptyDef)
import qualified Text.ParserCombinators.Parsec.Token as Token
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-3&quot;&gt;Lexer&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-3&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-haskell&quot;&gt;tokenDef = Token.makeTokenParser $ emptyDef
     { Token.commentStart    = &quot;/*&quot;
	    , Token.commentEnd      = &quot;*/&quot;
	    , Token.commentLine     = &quot;//&quot;
	    , Token.identStart      = letter
	    , Token.identLetter     = alphaNum
	    , Token.reservedNames   = [ &quot;break&quot;
				      , &quot;continue&quot;
				      , &quot;else&quot;
				      , &quot;false&quot;
				      , &quot;if&quot;
				      , &quot;print&quot;
				      , &quot;true&quot;
				      , &quot;while&quot;
				      ]
	    , Token.reservedOpNames = [&quot;+&quot;, &quot;-&quot;, &quot;*&quot;, &quot;/&quot;, &quot;:=&quot;
				      , &quot;&amp;lt;&quot;, &quot;&amp;gt;&quot;, &quot;|&quot;
				      , &quot;and&quot;, &quot;or&quot;, &quot;not&quot;]
	    }


reserved = Token.reserved tokenDef
reservedOp = Token.reservedOp tokenDef
ident = Token.identifier tokenDef
integer = Token.integer tokenDef
float = Token.float tokenDef
stringLit = Token.stringLiteral tokenDef
ws = Token.whiteSpace tokenDef
symbol = Token.symbol tokenDef
parens = Token.parens tokenDef
braces = Token.braces tokenDef
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-4&quot;&gt;Data types&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-4&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-haskell&quot;&gt;data Expr =
    Add Expr Expr
    | Sub Expr Expr
    | Mul Expr Expr
    | Div Expr Expr
    | Eq Expr Expr
    | Less Expr Expr
    | Greater Expr Expr
    | Le Expr Expr
    | Ge Expr Expr
    | Ne Expr Expr
    | And Expr Expr
    | Or Expr Expr
    | Not Expr
    | Neg Expr
    | Call String [Expr]
    | V String
    | I Integer
    | D Double
    | S String
    | T
    | F
    deriving (Show, Eq)

data Stmt =
    Assign Expr Expr
    | Block [Stmt]
    | Print [Expr]
    | If Expr Stmt (Maybe Stmt)
    | While Expr Stmt
    | Break
    | Continue
    deriving (Show, Eq)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-5&quot;&gt;Useful combinators&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-5&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-haskell&quot;&gt;commaSep p  = p `sepBy` (symbol &quot;,&quot;)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-6&quot;&gt;Expression parser&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-6&quot;&gt;
&lt;p&gt;
This is the expression parser. This accepts semantically invalid
expressions as there is no distinction between numerical, string and
boolean expressions. In a future post, I will implement a semantic
pass over the AST which will flag invalid expressions.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-haskell&quot;&gt;exprP :: Parser Expr
--exprP = termP `chainl1` termopP

exprP = bexprP `chainl1` bopP

bexprP = rexprP `chainl1` relopP

rexprP = termP `chainl1` termopP

termP :: Parser Expr
termP = factorP `chainl1` factoropP

factorP :: Parser Expr
factorP = Not &amp;lt;$&amp;gt; (notP *&amp;gt; factorP)
   &amp;lt;|&amp;gt; Neg &amp;lt;$&amp;gt; (symbol &quot;-&quot; *&amp;gt; factorP)
   &amp;lt;|&amp;gt; symbol &quot;+&quot; *&amp;gt; factorP
   &amp;lt;|&amp;gt; D &amp;lt;$&amp;gt; try float
   &amp;lt;|&amp;gt; I &amp;lt;$&amp;gt; try integer
   &amp;lt;|&amp;gt; S &amp;lt;$&amp;gt; stringLit
   &amp;lt;|&amp;gt; reserved &quot;true&quot; *&amp;gt; return T
   &amp;lt;|&amp;gt; reserved &quot;false&quot; *&amp;gt; return F
   &amp;lt;|&amp;gt; try callP
   &amp;lt;|&amp;gt; V &amp;lt;$&amp;gt; ident
   &amp;lt;|&amp;gt; parens exprP

relopP = (reservedOp &quot;=&quot; *&amp;gt; return Eq
	   &amp;lt;|&amp;gt; reservedOp &quot;&amp;lt;&quot; *&amp;gt; return Less
	   &amp;lt;|&amp;gt; reservedOp &quot;&amp;gt;&quot; *&amp;gt; return Greater
	   &amp;lt;|&amp;gt; reservedOp &quot;!=&quot; *&amp;gt; return Ne
	   &amp;lt;|&amp;gt; reservedOp &quot;&amp;lt;=&quot; *&amp;gt; return Le
	   &amp;lt;|&amp;gt; reservedOp &quot;&amp;lt;=&quot; *&amp;gt; return Ge)

bopP = symbol &quot;|&quot; *&amp;gt; return Or
       &amp;lt;|&amp;gt; symbol &quot;&amp;amp;&quot; *&amp;gt; return And
       &amp;lt;|&amp;gt; reserved &quot;or&quot; *&amp;gt; return Or
       &amp;lt;|&amp;gt; reserved &quot;and&quot; *&amp;gt; return And

termopP = symbol &quot;+&quot; *&amp;gt; return Add
   &amp;lt;|&amp;gt; symbol &quot;-&quot; *&amp;gt;  return Sub

factoropP = symbol &quot;*&quot; *&amp;gt; return Mul
   &amp;lt;|&amp;gt; symbol &quot;/&quot; *&amp;gt; return Div

callP = Call &amp;lt;$&amp;gt; ident &amp;lt;*&amp;gt; parens (commaSep exprP)

notP = reservedOp &quot;!&quot; &amp;lt;|&amp;gt; reserved &quot;not&quot;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-7&quot;&gt;Statement parser&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-7&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-haskell&quot;&gt;stmtP :: Parser Stmt
stmtP =   assignP
      &amp;lt;|&amp;gt; blockP
      &amp;lt;|&amp;gt; printP
      &amp;lt;|&amp;gt; try ifElseP
      &amp;lt;|&amp;gt; ifP
      &amp;lt;|&amp;gt; whileP
      &amp;lt;|&amp;gt; breakP
      &amp;lt;|&amp;gt; continueP

blockP = Block &amp;lt;$&amp;gt; braces (many stmtP)

printP = Print &amp;lt;$&amp;gt; (reserved &quot;print&quot; &amp;gt;&amp;gt; (commaSep exprP))

assignP = Assign &amp;lt;$&amp;gt; exprP &amp;lt;*&amp;gt; (reservedOp &quot;:=&quot; &amp;gt;&amp;gt; exprP)

ifP = If &amp;lt;$&amp;gt; ((reserved &quot;if&quot;) &amp;gt;&amp;gt; exprP) &amp;lt;*&amp;gt; stmtP &amp;lt;*&amp;gt; return Nothing

ifElseP = If &amp;lt;$&amp;gt; ((reserved &quot;if&quot;) &amp;gt;&amp;gt; exprP) &amp;lt;*&amp;gt; stmtP
		 &amp;lt;*&amp;gt; ((reserved &quot;else&quot;) *&amp;gt; (Just &amp;lt;$&amp;gt; stmtP))

whileP = While &amp;lt;$&amp;gt; (reserved &quot;while&quot; &amp;gt;&amp;gt; exprP) &amp;lt;*&amp;gt; stmtP

breakP = reserved &quot;break&quot; *&amp;gt; return Break

continueP = reserved &quot;continue&quot; *&amp;gt; return Continue
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-8&quot;&gt;DSL Parser&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-8&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-haskell&quot;&gt;dslP :: Parser [Stmt]
dslP = ws *&amp;gt; many stmtP &amp;lt;* eof
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-9&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-9&quot;&gt;Most problematic areas&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-9&quot;&gt;
&lt;p&gt;
With Parsec, it turns out to be important to order the parsers and
adorn them with &lt;code&gt;try&lt;/code&gt;. This was most evident in &lt;code&gt;factorP&lt;/code&gt;. Very
briefly, when there are two parsers one of which is a prefix of the
orher, the parser of the longer input should be listed first. If a
parser can fail after consuming some input, it should be wrapped in
&lt;code&gt;try&lt;/code&gt; so that the next parser will be tried at the correct input
position.
&lt;/p&gt;

&lt;p&gt;
Other than this, using Parsec to build parsers is pretty straightforward.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Test program&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
Here is test program that verifies the correctness of the parser. The
tokenizer seems to have a bug. It correctly parses &quot;1.2&quot; as &lt;code&gt;D 1.2&lt;/code&gt;
but parses &lt;code&gt;-1.2&lt;/code&gt; as &lt;code&gt;I (-1)&lt;/code&gt;. I will defer this issue for now!
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-1&quot;&gt;Module imports&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-1&quot;&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-haskell&quot;&gt;import Text.Parsec (parseTest)
import Data.List (intercalate)
import Text.Parsec.String
import Parser
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-2&quot;&gt;Expression tests&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-2&quot;&gt;
&lt;p&gt;
Testing expression parsing.
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-haskell&quot;&gt;exprTests :: [(String, Expr)]
exprTests = [(&quot;10&quot;, I 10)
	 , (&quot;-1&quot;, Neg (I 1))
	 , (&quot;- 1&quot;, Neg (I 1))
	 , (&quot;1.2&quot;, D 1.2)
	 , (&quot;-1.2&quot;, Neg (D 1.2))
	 , (&quot;- 1.3&quot;, Neg (D 1.3))
	 , (&quot;a&quot;, V &quot;a&quot;)
	 , (&quot;\&quot;a\&quot;&quot;, S &quot;a&quot;)
	 , (&quot;true&quot;, T)
	 , (&quot;false&quot;, F)
	 , (&quot;1 + 2&quot;, Add (I 1) (I 2))
	 , (&quot;1 + -2&quot;, Add (I 1) (Neg (I 2)))
	 , (&quot;1 + 2 * 3&quot;, Add (I 1) (Mul (I 2) (I 3)))
	 , (&quot;1 - 2&quot;, Sub (I 1) (I 2))
	 , (&quot;1 - 2 * 3&quot;, Sub (I 1) (Mul (I 2) (I 3)))
	 , (&quot;1 + 2 * 3 / 4&quot;, Add (I 1) (Div (Mul (I 2) (I 3)) (I 4)))
	 , (&quot;1 + a&quot;, Add (I 1) (V &quot;a&quot;))
	 , (&quot;1 = a&quot;, Eq (I 1) (V &quot;a&quot;))
	 , (&quot;1 = 2&quot;, Eq (I 1) (I 2))
	 , (&quot;true and true&quot;, And T T)
	 , (&quot;true &amp;amp; true&quot;, And T T)
	 , (&quot;true | true&quot;, Or T T)
	 , (&quot;true or true&quot;, Or T T)
	 , (&quot;1 = 2 &amp;amp; 2 = 4&quot;, And (Eq (I 1) (I 2)) (Eq (I 2) (I 4)))
	 , (&quot;a = b &amp;amp; c = d&quot;, And (Eq (V &quot;a&quot;) (V &quot;b&quot;)) (Eq (V &quot;c&quot;) (V &quot;d&quot;)))
	 , (&quot;a = b | c = d&quot;, Or (Eq (V &quot;a&quot;) (V &quot;b&quot;)) (Eq (V &quot;c&quot;) (V &quot;d&quot;)))
	 , (&quot;(a | b) &amp;amp; (c | d)&quot;, And (Or (V &quot;a&quot;) (V &quot;b&quot;)) (Or (V &quot;c&quot;) (V &quot;d&quot;)))
	 , (&quot;(a &amp;amp; b) | (c &amp;amp; d)&quot;, Or (And (V &quot;a&quot;) (V &quot;b&quot;)) (And (V &quot;c&quot;) (V &quot;d&quot;)))
	 , (&quot;-(1.2)&quot;, Neg (D 1.2))
	 , (&quot;+(1.2)&quot;, D 1.2)
	 , (&quot;not true&quot;, Not T)
	 , (&quot;not not true&quot;, Not (Not T))
	 , (&quot;true = false&quot;, Eq T F)
	 , (&quot;foo()&quot;, Call &quot;foo&quot; [])
	 , (&quot;foo(1)&quot;, Call &quot;foo&quot; [I 1])
	 , (&quot;foo(1, true)&quot;, Call &quot;foo&quot; [I 1, T])
	 , (&quot;foo(1, 2)&quot;, Call &quot;foo&quot; [I 1, I 2])
	 ]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-3&quot;&gt;Statement tests&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-3&quot;&gt;
&lt;p&gt;
Testing statement parsing.
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-haskell&quot;&gt;stmtTests :: [(String, Stmt)]
stmtTests = [ (&quot;x := 1&quot;, Assign (V &quot;x&quot;) (I 1))
	    , (&quot;print 1, 2&quot;, Print [I 1, I 2])
	    , (&quot;print 1&quot;, Print [I 1])
	    , (&quot;{}&quot;, Block [])
	    , (&quot;if true print \&quot;T\&quot; else print \&quot;F\&quot;&quot;,
	       If T (Print [S &quot;T&quot;]) (Just (Print [S &quot;F&quot;])))
	    , (&quot;if true print 1&quot;, If T (Print [I 1]) Nothing)
	    , (&quot;break&quot;, Break)
	    , (&quot;continue&quot;, Continue)
	    ]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-4&quot;&gt;Dsl tests&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-4&quot;&gt;
&lt;p&gt;
Example DSL and its expected result.
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-haskell&quot;&gt;dslTests :: [(String, [Stmt])]
dslTests =  [ (&quot;x := 1 y:= 2&quot;, [Assign (V &quot;x&quot;) (I 1), Assign (V &quot;y&quot;) (I 2)])
	    , (&quot; x := 1 &quot;, [Assign (V &quot;x&quot;) (I 1)])
	    ]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-5&quot;&gt;Test runner&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-5&quot;&gt;
&lt;p&gt;
&lt;code&gt;testParser&lt;/code&gt; accepts a list of input and expected results of parsing
them. Inputs that don't produce the expected results are printed.
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-haskell&quot;&gt;testParser:: (Eq a, Show a) =&amp;gt; Parser a -&amp;gt; [(String, a)] -&amp;gt; IO ()
testParser p tests = do
  putStr (intercalate &quot;\r\n&quot;
	   (filter (not . null)
	     (map
	       (\(s, e, r) -&amp;gt; case r of
		  Right ast -&amp;gt; if e == ast
			then &quot;&quot; -- &quot;Parsed: &quot; ++  s
			else &quot;Error: &quot; ++ s ++ &quot; Exp: &quot; ++
			      show e ++ &quot; Act: &quot; ++ show ast
		  Left e -&amp;gt; &quot;Parse error: \n&quot; ++ show e)
	       (map (\(s, e) -&amp;gt; (s, e, parse p s s)) tests))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-3-6&quot;&gt;Main program&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-3-6&quot;&gt;
&lt;p&gt;
Runs all tests defined above.
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-haskell&quot;&gt;main :: IO ()
main = do
   testParser exprP exprTests
   testParser stmtP stmtTests
   testParser dslP dslTests
   putStr &quot;\nDONE!\n&quot;
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description></item><item><title>Blogging with emacs and org-mode</title><link>http://MonadicT.github.io/2016/06/19/Blogging/</link><pubDate>Sun, 19 Jun 2016 00:00:00 -0700</pubDate><description>&lt;p&gt;
I do most of my work in &lt;code&gt;emacs&lt;/code&gt; and blogging is no
exception. But, everytime I start a blog post, I go through a small
learning curve around the tools I use. I am going to put an end to it,
once and for all :)
&lt;/p&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Emacs setup&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
Obviously, you need &lt;code&gt;org-mode&lt;/code&gt;. Version &lt;code&gt;8.*&lt;/code&gt; is preferred and there
are many breaking changes from its previous versions. If you are using
a recent vintage &lt;code&gt;emacs&lt;/code&gt;, &lt;code&gt;org-mode&lt;/code&gt; is already bundled. Unless you
are running into a bug involving advanced usage, there should be no
need to upgrade &lt;code&gt;org-mode&lt;/code&gt;. But, I do recommend cloning repo
&lt;code&gt;org-mode&lt;/code&gt; and installing it from the source. It's really fun to
experience how smooth building it is compared to some of our internal
software!
&lt;/p&gt;

&lt;p&gt;
We need to tell &lt;code&gt;org-mode&lt;/code&gt; what source languages to process for export
and whether it should prompt before processing a source block written
in some language. We do that by customizing &lt;code&gt;org-babel-load-langauges&lt;/code&gt;
variable. We redefine &lt;code&gt;org-confirm-babel-evaluate&lt;/code&gt; to skip asking for
confirmation for the languages.
&lt;/p&gt;

&lt;p&gt;
We also set &lt;code&gt;org-src-fontify-natively&lt;/code&gt; so that the source blocks are
fontified as well.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-emacs-lisp&quot;&gt;&lt;span style=&quot;color: #008787; font-weight: bold; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #008787; font-weight: bold; font-style: italic;&quot;&gt;Load org export extensions&lt;/span&gt;
(&lt;span style=&quot;color: #ff5f00; font-weight: bold;&quot;&gt;require&lt;/span&gt; '&lt;span style=&quot;font-weight: bold; text-decoration: underline;&quot;&gt;ox-latex&lt;/span&gt;)

&lt;span style=&quot;color: #008787; font-weight: bold; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #008787; font-weight: bold; font-style: italic;&quot;&gt;org-mode should process these languages&lt;/span&gt;
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (clojure . t)
   (latex . t)))

&lt;span style=&quot;color: #008787; font-weight: bold; font-style: italic;&quot;&gt;;; &lt;/span&gt;&lt;span style=&quot;color: #008787; font-weight: bold; font-style: italic;&quot;&gt;We don't want the &quot;confirm evaluation&quot; prompt for these languages&lt;/span&gt;
(&lt;span style=&quot;color: #ff5f00; font-weight: bold;&quot;&gt;defun&lt;/span&gt; &lt;span style=&quot;color: #d7af00; font-weight: bold;&quot;&gt;my-org-confirm-babel-evaluate&lt;/span&gt; (lang body)
  (not (&lt;span style=&quot;color: #ff5f00; font-weight: bold;&quot;&gt;or&lt;/span&gt; (string= lang &lt;span style=&quot;color: #afafff; font-style: italic;&quot;&gt;&quot;python&quot;&lt;/span&gt;)
           (string= lang &lt;span style=&quot;color: #afafff; font-style: italic;&quot;&gt;&quot;emacs-lisp&quot;&lt;/span&gt;)
           (string= lang &lt;span style=&quot;color: #afafff; font-style: italic;&quot;&gt;&quot;dot&quot;&lt;/span&gt;)
           (string= lang &lt;span style=&quot;color: #afafff; font-style: italic;&quot;&gt;&quot;latex&quot;&lt;/span&gt;))))
(&lt;span style=&quot;color: #ff5f00; font-weight: bold;&quot;&gt;setq&lt;/span&gt; org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
(&lt;span style=&quot;color: #ff5f00; font-weight: bold;&quot;&gt;setq&lt;/span&gt; org-src-fontify-natively t)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;Source blocks&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
Source code blocks are delimited by &lt;code&gt;#+BEGIN_SRC lang&lt;/code&gt; and
&lt;code&gt;#+END_SRC&lt;/code&gt;. &lt;code&gt;emacs&lt;/code&gt; evaluates the source block and uses the result in
export. Source block parameters, &lt;code&gt;:results&lt;/code&gt; and &lt;code&gt;:exports&lt;/code&gt; are
particularly useful in this context.
&lt;/p&gt;

&lt;p&gt;
&lt;code&gt;:results&lt;/code&gt; can have the following options specified.
&lt;/p&gt;

&lt;p&gt;
collection is either &lt;code&gt;value&lt;/code&gt; or &lt;code&gt;output&lt;/code&gt;. The first option instructs
  &lt;code&gt;org-mode&lt;/code&gt; to capture the return value of evaluation and use it in
  exporting. The second option causes any output written to &lt;code&gt;STDOUT&lt;/code&gt;
  to be used as the value of the source block.
&lt;/p&gt;

&lt;p&gt;
type is one of &lt;code&gt;table, vector&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;scalar&lt;/code&gt;, &lt;code&gt;verbatim&lt;/code&gt; or
  &lt;code&gt;file&lt;/code&gt;.  By default, result is handled as a &lt;code&gt;table&lt;/code&gt; or &lt;code&gt;scalar&lt;/code&gt;
  depending on the value. Results of type &lt;code&gt;scalar&lt;/code&gt; or &lt;code&gt;verbatim&lt;/code&gt; are
  not converted to tables. A result type of &lt;code&gt;file&lt;/code&gt; points to the file
  where the result is stored and causes a file link to be inserted.
&lt;/p&gt;

&lt;p&gt;
format is one of:
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;code&gt;raw&lt;/code&gt; results are inserted directly into the buffer
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;org&lt;/code&gt; results are enclosed in a &lt;code&gt;#+BEGIN_SRC org&lt;/code&gt; block
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;html&lt;/code&gt; results are assumed to be &lt;code&gt;HTML&lt;/code&gt; and enclosed in a &lt;code&gt;#+BEGIN_SRC html&lt;/code&gt; block
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;latex&lt;/code&gt; results assumed to be LaTeX and are enclosed in a BEGIN&lt;sub&gt;LaTeX&lt;/sub&gt; block
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;code&lt;/code&gt; result are assumed to be parsable code and are enclosed in a code block
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pp&lt;/code&gt; result is converted to pretty-printed code and is enclosed in a code block.
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;drawer&lt;/code&gt; result is wrapped in a RESULTS drawer
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
handling is one of
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;code&gt;silent&lt;/code&gt; results are not inserted into the buffer
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;replace&lt;/code&gt; any existing value is replaced with value
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;append&lt;/code&gt; result is appended to existing
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prepend&lt;/code&gt; reslult is prepended to existing
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
&lt;code&gt;:exports&lt;/code&gt; can have one of the following values.
&lt;/p&gt;
&lt;ul class=&quot;org-ul&quot;&gt;
&lt;li&gt;&lt;code&gt;code&lt;/code&gt; body of source block is inserted into the buffer
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;results&lt;/code&gt; result of source block evaluation is inserted into the buffer
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;both&lt;/code&gt; code and results are inserted into the buffer
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;none&lt;/code&gt; neither code nor results are inserted into the buffer
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Here is a Python source code block which exports code and results.
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
#+BEGIN_SRC python :results value :exports both
# A simple Python source block
return 42
#+END_SRC
&lt;/pre&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-python&quot;&gt;&lt;span style=&quot;color: #008787; font-weight: bold; font-style: italic;&quot;&gt;# &lt;/span&gt;&lt;span style=&quot;color: #008787; font-weight: bold; font-style: italic;&quot;&gt;A simple Python source block&lt;/span&gt;
&lt;span style=&quot;color: #ff5f00; font-weight: bold;&quot;&gt;return&lt;/span&gt; 42
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class=&quot;example&quot;&gt;
42
&lt;/pre&gt;

&lt;p&gt;
Here is another Python source block whose output is captured and only the results is exported.
&lt;/p&gt;

&lt;pre class=&quot;example&quot;&gt;
#+BEGIN_SRC python :results output :exports results
print &quot;Hello, world!&quot;
return 42
#+END_SRC
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Blog post&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;/div&gt;&lt;div id=&quot;outline-container-sec-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;Header&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;p&gt;
A blog post begins with the following.
&lt;/p&gt;
&lt;pre class=&quot;example&quot;&gt;
#+TITLE: Blogging with org-mode
#+tags: emacs org-mode blogging
#+options: toc:nil num:nil tex:t LaTeX:t
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-2&quot;&gt;Including a \LaTeX generated figure&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;p&gt;
Here is a \LaTeX{} block to generate an image in the exported
document. By default, the result type is &lt;b&gt;latex&lt;/b&gt; and the output is
wrapped in &lt;code&gt;#:BEGIN_LaTeX...#:END_LaTeX&lt;/code&gt; block. Note that there are
no temporary graphics files generated at all.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-latex&quot;&gt;&lt;span style=&quot;color: #ff5f00; font-weight: bold;&quot;&gt;\let\earth\relax&lt;/span&gt;
&lt;span style=&quot;color: #ff5f00; font-weight: bold;&quot;&gt;\input&lt;/span&gt;{&lt;span style=&quot;color: #afd700; font-weight: bold;&quot;&gt;eltex1&lt;/span&gt;}
&lt;span style=&quot;color: #ff5f00; font-weight: bold;&quot;&gt;\begin&lt;/span&gt;{&lt;span style=&quot;color: #d7af00; font-weight: bold;&quot;&gt;figure&lt;/span&gt;}
&lt;span style=&quot;color: #ff5f00; font-weight: bold;&quot;&gt;\begin&lt;/span&gt;{&lt;span style=&quot;color: #d7af00; font-weight: bold;&quot;&gt;center&lt;/span&gt;}
&lt;span style=&quot;color: #ff5f00; font-weight: bold;&quot;&gt;\begin&lt;/span&gt;{&lt;span style=&quot;color: #d7af00; font-weight: bold;&quot;&gt;picture&lt;/span&gt;}(40,60)(0,0)
&lt;span style=&quot;color: #ff5f00; font-weight: bold;&quot;&gt;\grid&lt;/span&gt;{10}{8}
&lt;span style=&quot;color: #ff5f00; font-weight: bold;&quot;&gt;\end&lt;/span&gt;{&lt;span style=&quot;color: #d7af00; font-weight: bold;&quot;&gt;picture&lt;/span&gt;}
&lt;span style=&quot;color: #ff5f00; font-weight: bold;&quot;&gt;\end&lt;/span&gt;{&lt;span style=&quot;color: #d7af00; font-weight: bold;&quot;&gt;center&lt;/span&gt;}
&lt;span style=&quot;color: #ff5f00; font-weight: bold;&quot;&gt;\end&lt;/span&gt;{&lt;span style=&quot;color: #d7af00; font-weight: bold;&quot;&gt;figure&lt;/span&gt;}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
For latex source code blocks, default value of &lt;code&gt;:results&lt;/code&gt; is &lt;code&gt;output&lt;/code&gt;
and &lt;code&gt;:exports&lt;/code&gt; is &lt;code&gt;results&lt;/code&gt;.
&lt;/p&gt;

&lt;p&gt;
In contrast, the following block creates
a graphic file as specified by &lt;code&gt;:file&lt;/code&gt; argument. &lt;code&gt;:results&lt;/code&gt; is
specified as &lt;code&gt;output file raw&lt;/code&gt; which causes the output to be
interpreted as a file link. Note the use of &lt;code&gt;raw&lt;/code&gt; without which the
file link will be wrapped into a latex block.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-3&quot;&gt;Including a graphviz diagram&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-3&quot;&gt;
&lt;p&gt;
We need to have &lt;i&gt;graphviz&lt;/i&gt; installed on the system. &lt;i&gt;emacs&lt;/i&gt; should be
able to find &lt;code&gt;dot&lt;/code&gt; command. As usual, Windows is a pain but &lt;i&gt;I have
become comfortably numb&lt;/i&gt; :)
&lt;/p&gt;

&lt;p&gt;
You might need to locate and copy &lt;code&gt;ob-dot.el&lt;/code&gt; to a location where
&lt;code&gt;emacs&lt;/code&gt; will find it.
&lt;/p&gt;

&lt;div class=&quot;figure&quot;&gt;
&lt;p&gt;&lt;img src=&quot;dotfig.png&quot; alt=&quot;dotfig.png&quot; /&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-3&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-3&quot;&gt;Publishing&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-3&quot;&gt;
&lt;p&gt;
My blogging host is at &lt;i&gt;mondiact.github.io&lt;/i&gt;. My Github user id is
&lt;i&gt;MonadicT&lt;/i&gt; and the repo named
&lt;code&gt;https://github.com/MonadicT/MonadicT.github.io&lt;/code&gt; is the source of
posts. Github runs a restricted version of &lt;a href=&quot;https://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; on
this repo and generates a static website which is published on
&lt;i&gt;github.io&lt;/i&gt;. Unfortunately, the restricted version doesn't let us do
tags and a blog post without tags is not all that useful.
&lt;/p&gt;

&lt;p&gt;
The workaround is to do all the processing locally and generate the
static website and push it to github. And, we tell github to not run
Jekyll on our repo. The presence of &lt;code&gt;.nojekyll&lt;/code&gt; in the root directory
tells github to run Jekyll.
&lt;/p&gt;

&lt;p&gt;
All we need is a way to generate the posts locally and make it
available. While it can be done with Jekyll running on our system, I
chose to use a tool called &lt;a href=&quot;http://nakkaya.com/static.html&quot;&gt;Static&lt;/a&gt; implemented in Clojure. The
following bash command starts static and rebuilds the site when posts
change.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-bash&quot;&gt;java -jar ../static/target/static-app.jar --watch
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
When the post is complete, we need to commit all the files to git and push it to Github.
&lt;/p&gt;
&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-bash&quot;&gt;git status
git add &amp;lt;new posts&amp;gt;
git commit -am &quot;Commit message&quot;
git push
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Just like that, the new post appears on Github in all its glory.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-4&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-4&quot;&gt;Troubleshooting&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-4&quot;&gt;
&lt;p&gt;
There are many moving parts in &lt;code&gt;org-mode&lt;/code&gt; and when things go wrong,
debugging is taxing. Google is our friend and one particularly nasty
bug I hit was the messed up state of &lt;code&gt;org-mode&lt;/code&gt;. This magical sequence,
&lt;code&gt;C-U M-x org-reload&lt;/code&gt;, fixed my issue with &quot;wrong type argument&quot; error.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description></item><item><title>Configuring xmonad</title><link>http://MonadicT.github.io/2015/05/20/xmonad/</link><pubDate>Wed, 20 May 2015 00:00:00 -0700</pubDate><description>&lt;p&gt;
&lt;a href=&quot;http://www.xmonad.org&quot;&gt;xmonad&lt;/a&gt; is a minimal tiling window manager. This post shows how to
setup xmnoad on a Ubuntu 14.04 machine and configure it in small
steps. xmonad configuration is done through a Haskell program and this
proves to be one of the major obstacles to using xmonad
effectively. On the other hand, if you can understand basic Haskell syntax,
there is not another window manager that I know of which is as
extensible as xmonad. xmonad is to window management as emacs is to,
well, let's stop right there! You get the idea!
&lt;/p&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;Installing xmonad&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
My usual sequence for setting up a Linux computer is to install Ubuntu
or something similar. The distribution you use really doesn't matter
since we are going to be avoiding all the bells and whistles that come
with each distribution. Let's assume that you have X installed on the
system and a desktop such as gnome or Kde. In my case, I installed
Ubuntu 14.04 and installed gnome desktop using &lt;i&gt;sudo apt-get install
gnome-desktop&lt;/i&gt;. I then created a file called
&lt;b&gt;/usr/share/applications/xmonad.desktop&lt;/b&gt; with the following
contents. With this in place, Gnome Display Manager gives me an
additional choice of window managers to run when I login.
&lt;/p&gt;

&lt;p&gt;
There are many other ways to get xmonad to run as the window
manager. &lt;b&gt;~/.xessionrc&lt;/b&gt; is another place where xmonad can be started
on login.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-bash&quot;&gt;[Desktop Entry]
Type=Application
Name=Xmonad
Exec=xmonad
NoDisplay=true
X-GNOME-WMName=Xmonad
X-GNOME-Autostart-Phase=WindowManager
X-GNOME-Provides=windowmanager
X-GNOME-Autostart-Notify=true
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;Configuring xmonad&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
xmonad runs happily with no custom configuration. However, it is going to be
a bland experience. Customizing xmonad requires you to have a
&lt;b&gt;~/.xmonad/xmonad.hs&lt;/b&gt; file. Adding content to this file will be the
main focus of this post.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-1&quot;&gt;Hello, xmonad.hs&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-1&quot;&gt;
&lt;p&gt;
This is the simplest configuration of XMonad window manager. It just
runs xmonad with &lt;i&gt;defaultConfig&lt;/i&gt;. &lt;i&gt;defaultConfig&lt;/i&gt; is just a record
containing xmonad configuration options. As we will see later, we can use Haskell's record
update syntax to change the options.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-haskell&quot;&gt;import XMonad
main = xmonad defaultConfig
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-2&quot;&gt;Taking back our Alt key&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-2&quot;&gt;
&lt;p&gt;
If you are an &lt;i&gt;emacs&lt;/i&gt; user, you are likely to be missing some favorite
Alt key combinations. Let's change XMonad key to the Window key, which
most of us happen to have on our keyboards. The following will tell
XMonad to use Windows key instead of Alt.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-haskell&quot;&gt;import XMonad
main = xmonad defaultConfig {
  modMask = mod4Mask
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-3&quot;&gt;Configuring XMonad for a Desktop Environment&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-3&quot;&gt;
&lt;p&gt;
A list of configuration options can be seen at &lt;a href=&quot;http://xmonad.org/xmonad-docs/xmonad/XMonad-Core.html#t:XConfig&quot;&gt;XConfig&lt;/a&gt;. Generally, we
run Xmonad in a  &lt;a href=&quot;http://en.wikipedia.org/wiki/Desktop_environment&quot;&gt;Desktop Environment&lt;/a&gt;. In such cases, Xmonad
configuration should start with &lt;a href=&quot;http://xmonad.org/xmonad-docs/xmonad-contrib/XMonad-Config-Desktop.html&quot;&gt;Desktop Config&lt;/a&gt;. You can use a generic
desktop configuration or specific to the environment you are
using. Since I am running a Gnome environment, my xmnoad.hs will be as
shown below.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-haskell&quot;&gt;import XMonad
import XMonad.Config.Desktop
main = xmonad desktopConfig {
    modMask = mod4Mask
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Restarting Xmonad will now an interesting effect. Our window is moved
down by some distance leaving some room for running toolbars. We can
try running &lt;a href=&quot;http://en.wikipedia.org/wiki/GNOME_Panel&quot;&gt;GNOME Panel&lt;/a&gt; as the status bar. That, of course, is
sub-optimal for my work flow and I prefer something like &lt;a href=&quot;http://linux.die.net/man/1/dzen2&quot;&gt;dzen2&lt;/a&gt;. dzen2
reads its standard input stream and displays it in the window it creates.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-4&quot;&gt;Configuring dzen2 and conky&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-4&quot;&gt;
&lt;p&gt;
dzen2 can be configured using ~/.Xresource&lt;sup&gt;&lt;a id=&quot;fnr.1&quot; name=&quot;fnr.1&quot; class=&quot;footref&quot; href=&quot;#fn.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Let's set foreground and background colors for dzen2
as below.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-bash&quot;&gt;dzen2.background: black
dzen2.foreground: white
dzen2.font: -*-fixed-*-*-*-*-11-*-*-*-*-*-*-*
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Running dzen2 will now display with black background and white
foreground. Each line it reads from its standard input stream will be
displayed by dzen2. Dzen2 also supports a custom formatting
language. &lt;i&gt;^fg(black)&lt;/i&gt; will switch foreground color to black and
&lt;i&gt;^fg()&lt;/i&gt; will switch it back to default foreground color. &lt;i&gt;^p(10)&lt;/i&gt; will
move the current position to right by 10 pixels. A negative number
will cause it to move to left.
&lt;/p&gt;

&lt;p&gt;
Now that we know how dzen2 works, let's see how we can display current
time at the top right-hand side of our screen. We could have a shell
script which pipes its output to dzen2 and loops over a sequence of
&lt;i&gt;date&lt;/i&gt; and &lt;i&gt;sleep&lt;/i&gt; commands. Fortunately, we can do much better using
a program called conky. Conky is configured using an initialization
file called &lt;i&gt;~.conkyrc&lt;/i&gt; and the following is what is in mine. Here,
conky displays a line of text at a half-second interval.  The line
after &lt;i&gt;TEXT&lt;/i&gt; controls what conky displays.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-bash&quot;&gt;own_wndow yes     # Need for display glicthes
double_buffer yes # ditto
update_interval 1 # Every second
total_run_times 0 # Run for ever
use_spacer yes    # Stop things from moving around
minimum_size 250 5
maximum_width 400
out_to_console yes

TEXT
Load: ${loadavg 1 2 3} Cpu: %${cpu} Mem: ${mem} \
Swap: ${swap} Wifi: ${wireless_essid wlan0} ${wireless_bitrate wlan0} \
${wireless_link_qual_perc wlan0} \
${exec acpi | awk '/Discharging/{print &quot;^fg(orange)Bat:&quot;, $4,&quot;^fg()&quot;}/Charging/{print &quot;Bat:&quot;, $4}'}  \
Audio: ${exec amixer -c 0 get Master | grep Mono: | cut -d &quot; &quot; -f8|tr -d &quot;[]&quot;} \
${time %b %d %I:%M:%S}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Running the following command will show a status bar with some useful
information.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-bash&quot;&gt;conky|dzen2 -x 400 -ta r
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
We can now see how to configure Xmonad to start conky and dzen2.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-haskell&quot;&gt;import XMonad
import XMonad.Config.Desktop

conkyStatusBar = &quot;conky |dzen2 -x 400 -y 0 -h 16 -ta r&quot;

main = do
      spawnPipe conkyStatusBar
      xmonad desktopConfig {
	  modMask = mod4Mask
      }
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-5&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-5&quot;&gt;Displaying window manager log&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-5&quot;&gt;
&lt;p&gt;
All window managers maintain the current state of the desktop and
xmonad is no exception. Xmonad has a &lt;i&gt;logHook&lt;/i&gt; which is called
whenever its internal state changes. It would be nice to see the list
of workspaces, current workspace, title of window with focus. To do
this, we specify a hook &lt;i&gt;dynamicLogWithPP&lt;/i&gt; whose configuration is
customized to pipe the log information to another &lt;i&gt;dzen2&lt;/i&gt; process.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-haskell&quot;&gt;import System.IO
import XMonad
import XMonad.Config.Desktop
import XMonad.Util.Run (spawnPipe)
import XMonad.Hooks.DynamicLog (defaultPP, ppOutput, ppOrder, dynamicLogWithPP)
import XMonad.Hooks.EwmhDesktops (ewmhDesktopsLogHook)
import XMonad.Hooks.SetWMName (setWMName)

foreground = &quot;yellow&quot;
conkyStatusBar = &quot;conky |dzen2 -x 400 -y 0 -h 16  -ta r&quot;

xmonadStatusBar = &quot;dzen2 -ta l -x 0 -y 0 -w 600 -e 'entertitle=uncollapse' -h 16 &quot; ++ &quot;\
	\-bg &quot; ++ background ++ &quot; -fg &quot; ++ foreground

main = do
      spawnPipe conkyStatusBar
      spawnPipe xmonadStatusBar
      xmproc &amp;lt;- spawnPipe xmonadStatusBar
      xmonad desktopConfig {
	  modMask = mod4Mask
	  , logHook    = dynamicLogWithPP $ defaultPP
			 { ppOutput = hPutStrLn xmproc
			   , ppOrder = take 3 . drop 0
			  }
      }
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-6&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-6&quot;&gt;Configuring terminal window&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-6&quot;&gt;
&lt;p&gt;
The default terminal window in my environment is &lt;b&gt;xterm&lt;/b&gt;. I like
&lt;b&gt;urxvt&lt;/b&gt; with the following parameters.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-bash&quot;&gt;myTerminal = &quot;urxvt -bg black -fg yellow -fade 30 -fadecolor white +sb&quot;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Adding this to my &lt;i&gt;xmonad.hs&lt;/i&gt;, it now looks as below.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-haskell&quot;&gt;import System.IO
import XMonad
import XMonad.Config.Desktop
import XMonad.Util.Run (spawnPipe)
import XMonad.Hooks.DynamicLog (defaultPP, ppOutput, ppOrder, dynamicLogWithPP)
import XMonad.Hooks.EwmhDesktops (ewmhDesktopsLogHook)
import XMonad.Hooks.SetWMName (setWMName)

foreground = &quot;yellow&quot;
conkyStatusBar = &quot;conky |dzen2 -x 400 -y 0 -h 16  -ta r&quot;

xmonadStatusBar = &quot;dzen2 -ta l -x 0 -y 0 -w 600 -e 'entertitle=uncollapse' -h 16 &quot;

myTerminal = &quot;urxvt -bg black -fg yellow -fade 30 -fadecolor white&quot;

main = do
      spawnPipe conkyStatusBar
      spawnPipe xmonadStatusBar
      xmproc &amp;lt;- spawnPipe xmonadStatusBar
      xmonad desktopConfig {
	  modMask = mod4Mask
	  , logHook    = dynamicLogWithPP $ defaultPP
			 { ppOutput = hPutStrLn xmproc
			   , ppOrder = take 3 . drop 0
			  }
	  , terminal = myTerminal
      }
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2-7&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-7&quot;&gt;Function key support&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-7&quot;&gt;
&lt;p&gt;
At this point, many Fn keys don't work as expected. Support for
multimedia keys can be added by extending the &lt;i&gt;desktopConfig&lt;/i&gt; element
with &lt;i&gt;`additionalKeys`&lt;/i&gt; method. Muting, volume control, brightness
control are all done by executing an OS command. Details depend on
your specific system configuration and here is what works on mine.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-haskell&quot;&gt;import Graphics.X11.ExtraTypes.XF86 (xF86XK_AudioLowerVolume, xF86XK_AudioRaiseVolume, xF86XK_AudioMute, xF86XK_MonBrightnessDown, xF86XK_MonBrightnessUp)
import System.IO
import XMonad
import XMonad.Config.Desktop
import XMonad.Hooks.DynamicLog (defaultPP, ppOutput, ppOrder, dynamicLogWithPP)
import XMonad.Hooks.EwmhDesktops (ewmhDesktopsLogHook)
import XMonad.Hooks.SetWMName (setWMName)
import XMonad.Prompt (defaultXPConfig)
import XMonad.Prompt.RunOrRaise (runOrRaisePrompt)
import XMonad.Util.EZConfig (additionalKeys)
import XMonad.Util.Run (spawnPipe)

conkyStatusBar = &quot;conky |dzen2 -x 400 -y 0 -h 16  -ta r&quot;

xmonadStatusBar = &quot;dzen2 -ta l -x 0 -y 0 -w 600 -e 'entertitle=uncollapse' -h 16 &quot;

myTerminal = &quot;urxvt -bg black -fg yellow -fade 30 -fadecolor white&quot;

main = do
      spawnPipe conkyStatusBar
      spawnPipe xmonadStatusBar
      xmproc &amp;lt;- spawnPipe xmonadStatusBar
      xmonad $ desktopConfig {
	  modMask = mod4Mask
	  , logHook    = dynamicLogWithPP $ defaultPP
			 { ppOutput = hPutStrLn xmproc
			   , ppOrder = take 3 . drop 0
			  }
	  , terminal = myTerminal
	}
	`additionalKeys`
	  [((mod4Mask .|. controlMask, xK_f), runOrRaisePrompt defaultXPConfig)
	   , ((0, xF86XK_AudioLowerVolume), spawn &quot;amixer set Master 1-&quot;)
	   , ((0, xF86XK_AudioRaiseVolume), spawn &quot;amixer set Master 1+&quot;)
	   , ((0, xF86XK_AudioMute), spawn &quot;amixer -D pulse set Master 1+ toggle&quot;)
	   , ((0, xF86XK_MonBrightnessDown), spawn &quot;xbacklight -10&quot;)
	   , ((0, xF86XK_MonBrightnessUp), spawn &quot;xbacklight +10&quot;)
	  ]
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
With these key bindings, we can now control audio volume and monitor
brightness. A visual indication of this would be a nice addition. We
can get the audio status from &lt;i&gt;amixer&lt;/i&gt; and massaging the output
through a few utilities as shown below. We augment our &lt;i&gt;.conkyrc&lt;/i&gt; with
this snippet and we are done!
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-bash&quot;&gt;Vol: ${exec amixer -c 0 get Master | grep Mono: | cut -d &quot; &quot; -f8|tr -d &quot;[]&quot;}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;outline-container-sec-2-8&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-2-8&quot;&gt;Startup actions&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-2-8&quot;&gt;
&lt;p&gt;
Now for the very last bits of my configuration. When I start my
session, I would like to have my editor, browser and a few terminal
windows started automatically. In addition, I would like to see them
moved to a different virtual workspace. xmonad's &lt;i&gt;startupHook&lt;/i&gt; is the
ideal place to spawn what we need. Now the &lt;i&gt;desktopConfig&lt;/i&gt; is
augmented with more spawn commands.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-haskell&quot;&gt;xmonad $ desktopConfig {
    ...
    , startupHook = do
	spawnOnce &quot;google-chrome --class chrome&quot;
	spawnOnce &quot;urxvt --title cljswatch -fg yellow -bg black -cd /home/praki/workspace/MonadicT.github.io&quot;

  }
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Moving the window to predetermined workspaces is accomplished using
xmonad's &lt;i&gt;mnagaeHook&lt;/i&gt;, Below is our version where windows are floated
(for pop ups) or moved to workspaces. We can use any attribute of the
window and take suitable action. What we are doing below is moving
chrome to wodkspace 2, windows with title &quot;logs&quot; to workspace 3 etc.
&lt;/p&gt;

&lt;p&gt;
We set xmonad's &lt;i&gt;manageHook&lt;/i&gt; by combining the default hook with ours
as shown below.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-haskell&quot;&gt;myManageHook
    = composeAll . concat $
      [ [className =? c --&amp;gt; doFloat | c &amp;lt;- myFloats]
      , [title =? t --&amp;gt; doFloat | t &amp;lt;- myOtherFloats]
      , [resource =? r --&amp;gt; doFloat | r &amp;lt;- myIgnores]
      , [className =? &quot;Gimp&quot; --&amp;gt; doF (W.shift &quot;5:misc&quot;)]
      , [className =? &quot;VirtualBox&quot; --&amp;gt; doF (W.shift &quot;5:misc&quot;)]
      , [className =? &quot;Wine&quot; --&amp;gt; doF (W.shift &quot;5:misc&quot;)]
      , [className =? &quot;chrome&quot; --&amp;gt; doShift &quot;2&quot;]
      , [title =? &quot;logs&quot; --&amp;gt; doShift &quot;3&quot;]
      , [title =? &quot;cljswatch&quot; --&amp;gt; doShift &quot;4&quot;]
      ]
    where
      myFloats = [&quot;Gimp&quot;, &quot;Nvidia-settings&quot;, &quot;XCalc&quot;, &quot;XFontSel&quot;, &quot;Xmessage&quot;, &quot;xmms&quot;]
      myOtherFloats = [&quot;Downloads&quot;, &quot;Firefox - Restore Previous Session&quot;, &quot;Save As...&quot;, &quot;Ediff&quot;, &quot;Ediff&amp;lt;2&amp;gt;&quot;]
      myIgnores = []

 xmonad $ desktopConfig {
	  ...
	  , manageHook = myManageHook &amp;lt;+&amp;gt; manageHook defaultConfig
}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;h2 class=&quot;footnotes&quot;&gt;Footnotes: &lt;/h2&gt;
&lt;div id=&quot;text-footnotes&quot;&gt;

&lt;div class=&quot;footdef&quot;&gt;&lt;sup&gt;&lt;a id=&quot;fn.1&quot; name=&quot;fn.1&quot; class=&quot;footnum&quot; href=&quot;#fnr.1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;p&gt;Changes made to
~/.Xresources need to be processed with the command &lt;b&gt;xrdb -merge
~/.Xresources&lt;/b&gt;&lt;/p&gt;&lt;/div&gt;


&lt;/div&gt;
&lt;/div&gt;</description></item><item><title>Safeguarding Secrets with GnuPG</title><link>http://MonadicT.github.io/2014/03/08/safeguarding-secrets-with-gnupg/</link><pubDate>Sat, 8 Mar 2014 00:00:00 -0800</pubDate><description>&lt;p&gt;
The best way to ensure that private information stays private is to
keep it all in your head and never divulge it unless tortured! That
ain't going to cut it in this day and age when we have more than a few
things to remember. The most common way is to use some kind of &lt;b&gt;data
safe&lt;/b&gt; where information can be stored with some level of privacy.
&lt;/p&gt;

&lt;p&gt;
Now, a disclaimer about this post and use of technology in securing
your secrets. There are many ways in which your private data could be
compromised. While the underlying math of cryptography seems foolproof
with technology we have now, a radically new approach, however
unlikely but not impossible, could render it vulnerable. But the good
news is that, we can trust the math. And the bad news?  We can never
trust the implementations. Cryptography implementations are plagued
with bugs which can go undetected for years. Many algorithms once
considered secure are now considered unfit. Your computer can be
bugged at the hardware level. There is a possibility that even a
computer not connected to the internet is vulnerable to eavesdropping.
&lt;/p&gt;

&lt;p&gt;
With that said, let's now dive into some practical techniques to
protect our documents. The tool we will use is GnuPG which is an
implementation of &lt;i&gt;OpenPGP&lt;/i&gt; and &lt;a href=&quot;http://tools.ietf.org/html/rfc4880&quot;&gt;RFC 4080&lt;/a&gt; . This is a good choice as it
is completely open source. In the world of security, an implementation
that is reviewed by people all over the world is more trustworthy than
a closed implementation where you would have to trust a corporation.
&lt;/p&gt;

&lt;div id=&quot;outline-container-sec-1&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-1&quot;&gt;GnuPG&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-1&quot;&gt;
&lt;p&gt;
In addition to encryption and decryption of documents, GnuPG can also
digitally sign and verify signatures. We won't be using those
capabilities here. GnuPG can encrypt documents using either symmetric
or asymmetric scheme. A symmetric scheme uses the same key to encrypt
and decrypt. An asymmetric scheme uses the public key to encrypt and
private key to decrypt. Asymmetric scheme allows anybody to
communicate securely with anyone whose public key is accessible.
&lt;/p&gt;

&lt;p&gt;
For our purposes, we can use either scheme.
&lt;/p&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-1&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-1&quot;&gt;Installation&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-1&quot;&gt;
&lt;p&gt;
Installation depends on the Linux distribution you are using. For
Debian/Ubuntu/Mint, the following incantation works.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;sudo apt-get install gnupg
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-2&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-2&quot;&gt;Key generation&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-2&quot;&gt;
&lt;p&gt;
You need to generate a key using the following command. The command
asks a number of questions about the type of key (choose RSA &amp;amp; RSA)
and identity to be associated with the key.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-clojure&quot;&gt;gpg --gen-key
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The generated keys are stored in &lt;code&gt;~/.gnupg/&lt;/code&gt;. It is a splendid idea to
keep copies of this directory. It's highly recommended to use a
passphrase and keep the copies in a safe and secure location. If you
lose these keys, there is no way to get them back! You have been
warned!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-3&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-3&quot;&gt;Encryption&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-3&quot;&gt;
&lt;p&gt;
&lt;code&gt;gpg&lt;/code&gt; encrypts using the public key of a user. When you want to
encrypt a document which should be for your use, you simply use your
own user id as shown below. If you had used someone else as the
&lt;i&gt;recipient&lt;/i&gt;, only that person would be able to decrypt what you
encrypt.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;gpg --encrypt -r user@domain --output doc.gpg doc.txt
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This command writes the encrypted output to &lt;code&gt;gpg.txt&lt;/code&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-1-4&quot; class=&quot;outline-3&quot;&gt;
&lt;h3 id=&quot;sec-1-4&quot;&gt;Decryption&lt;/h3&gt;
&lt;div class=&quot;outline-text-3&quot; id=&quot;text-1-4&quot;&gt;
&lt;p&gt;
A gpg-encrypted document is decrypted by the following
command. Decryption requires the private key of the user whose public
key was used as the encryption key. User can provide access to the key
either by entering the passphrase for the key or by running a
&lt;code&gt;gpg-agent&lt;/code&gt; process to which key is made available.
&lt;/p&gt;

&lt;div class=&quot;org-src-container&quot;&gt;

&lt;pre class=&quot;src src-sh&quot;&gt;gpg --decrypt foo.gpg
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id=&quot;outline-container-sec-2&quot; class=&quot;outline-2&quot;&gt;
&lt;h2 id=&quot;sec-2&quot;&gt;GnuPG in Emacs&lt;/h2&gt;
&lt;div class=&quot;outline-text-2&quot; id=&quot;text-2&quot;&gt;
&lt;p&gt;
The procedures described in the previous section get the job done. It
would be cumbersome to decrypt a document and then edit in an
editor. Luckily, Emacs users have built-in support for GnuPG (package
EasyPG). When Emacs detects an encrypted document, it will ask for
your passphrase and save the modified document encrypting it. Nothing
could be more convenient!
&lt;/p&gt;

&lt;p&gt;
Another disclaimer here! Anytime you have an decrypted copy of your
precious document, you must be aware of the potential of it being
leaked. Editors could be keeping backup copies, processes could get
swapped to disk, someone could be remotely viewing your screen. Keep
all these risk in mind. A big part of security is a healthy dose of
paranoia and distrust of everything.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description></item><item><title>Java Fork/Join Framework - an exemplar of elegant design</title><link>http://MonadicT.github.io/2014/02/26/JavaForkJoin/</link><pubDate>Wed, 26 Feb 2014 00:00:00 -0800</pubDate><description>&lt;p&gt;It's rare to see a well-crafted solution to a thorny problem. With multicore hardware becoming the norm a few years ago, we needed a way to take advantage of all those cores. In Java, we already have threads and synchronization constructs, right? What could be easier than throwing together a bunch of interfaces, classes and threads at this problem?&lt;/p&gt;
&lt;p&gt;The answer is not whether it is easier or harder. The question should really be about the right way to do it. The realization of Fork/Join implementation in Java is quite an impressive piece of engineering. Engineering as in recognizing the essence of the problem and solving it just right. Of course, the credit also goes to the original work done in Cilk project at MIT.&lt;/p&gt;
&lt;p&gt;I won't try to distill the contents of relevant papers in this post. You should really read Doug Lea's paper and the Cilk-5 paper would be a bonus read after that. Link to these papers are right here.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://gee.cs.oswego.edu/dl/papers/fj.pdf&quot;&gt;A Java Fork/Join Framework&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.52.2013&quot;&gt;The Implementation of the Cilk-5 Multithreaded Language&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The design of work-stealing and the implementation of underlying deque is full of deep insights into the problem and clever solutions. I never thought &lt;a href=&quot;https://en.wikipedia.org/wiki/Dekker's_algorithm&quot;&gt;Dekker's algorithm&lt;/a&gt;, which provides mutual exclusion between two processes, would ever be usable in a real-world solution. I suppose, some solutions are waiting for just the right problem.&lt;/p&gt;</description></item><item><title>How to fix Wi-Fi connection issues in Ubuntu 13.04</title><link>http://MonadicT.github.io/2014/02/25/Ubuntu-Network_trouble/</link><pubDate>Tue, 25 Feb 2014 00:00:00 -0800</pubDate><description>&lt;p&gt;I have used Ubuntu for almost a decade now. I have always thought it had a pretty good chance of being the alternative to MS Windows. After the recent Windows 8 release, which definitely makes a Linux alternative all the more imperative, I find it strangely ironic that Ubuntu seems to be emulating just that. Sigh.&lt;/p&gt;
&lt;p&gt;Rant over and now for a prductivity tip. When Ubuntu loses Wi-Fi connectivity, restarting network-manager or networking will not help. Reboot seems to be the only remedy after that. Here are a couple of bugs reported on this issue.&lt;/p&gt;
&lt;p&gt;https://bugs.launchpad.net/ubuntu/+bug/1072518 https://bugs.launchpad.net/ubuntu/+source/dbus/+bug/1102507&lt;/p&gt;
&lt;p&gt;There are many workarounds you can find on the net. However, on my laptop, what seems to work always is the following.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sh
sudo modprobe -r wl
sudo modprobe wl
&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Of course, the real solution may be to start using Arch Linux or something much simpler than the Windows-wannabe Ubuntu :)&lt;/p&gt;</description></item><item><title>core.async for throttling a Clojure function</title><link>http://MonadicT.github.io/2014/02/23/rate-limited-fns/</link><pubDate>Sun, 23 Feb 2014 00:00:00 -0800</pubDate><description></description></item><item><title>Java Reference Objects</title><link>http://MonadicT.github.io/2014/01/24/Java-References/</link><pubDate>Fri, 24 Jan 2014 00:00:00 -0800</pubDate><description>&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Perhaps the first trick of performance improvement is caching. Every programmer knows that performance of programs can be improved if somethings are cached in memory rather than recalculating or reading from disk everytime. However, balancing caching with memory needs of rest of the program is tricky. You can afford to cache a lot when demand for memory from rest of the program is small. But the cache should trim some of its entries when memory is needed by other parts of her program.&lt;/p&gt;
&lt;p&gt;Consider another scenario. You have a class, say &lt;strong&gt;F&lt;/strong&gt;, you would like to extend and associate some data with it. But &lt;strong&gt;F&lt;/strong&gt; is final and you don't have the ability to change it. Ideally, you would like to have an instance of some other class &lt;strong&gt;G&lt;/strong&gt; associated with each instance of &lt;strong&gt;F&lt;/strong&gt;. You could use a hash map with &lt;strong&gt;aF&lt;/strong&gt; as key and associate &lt;strong&gt;aG&lt;/strong&gt; with it. While this works, when you don't need &lt;strong&gt;aF&lt;/strong&gt; anymore, &lt;strong&gt;aF&lt;/strong&gt; and &lt;strong&gt;aG&lt;/strong&gt; hang around in memory because they are in the hash map.&lt;/p&gt;
&lt;p&gt;For our last scenario, consider an object which uses some resource. When the object is reclaimed by the garbage collector, the resource should also be freed. Ideally, we would like this to happen without tracking the object's lifetime and explicitly initiating resource cleanup. Note that &lt;em&gt;finalize&lt;/em&gt; method intended for object cleanup action is considered a nonstarter.&lt;/p&gt;
&lt;p&gt;In all these cases, we would like the garbage collector to understand a bit more about the references our code keeps. The &lt;em&gt;Reference&lt;/em&gt; class and its subclasses in &lt;strong&gt;java.lang.ref&lt;/strong&gt; package provide us with the tools to interact with the garbage collector. Each of the above scenarios described above can be handled with a special type of &lt;strong&gt;Reference&lt;/strong&gt; object. The rest of the post shows some Java code to illustrate the general ideas.&lt;/p&gt;
&lt;h3&gt;Building a GC-friendly cache&lt;/h3&gt;
&lt;p&gt;Say, your software creates something that is expensive and we would like to improve the overall performance by caching instances of it once they are created. We might want to go about building a cache that allows us to do something like this.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Insert items into cache without worrying about the number of entries  in it.&lt;/li&gt;
  &lt;li&gt;When the program runs short of memory, discard some or all cached entries.&lt;/li&gt;
  &lt;li&gt;When a cache lookup finds a discarded entry, treat it the same as item not in cache.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The trick to accomplishing all this without a lot of house keeping is to wrap the cached values in instances of &lt;strong&gt;java.lang.Ref.SoftReference&lt;/strong&gt;. The garbage collector has a notion of variable strength references. A normal reference to an object, also called strong reference, is one where the object is reachable from the roots of the program through a list of normal references. Instances which have strong references to them are not eligible for garbage collection. An object with a &lt;em&gt;SoftReference&lt;/em&gt; doesn't have any strong references to it and the garbage collector is free to reclaim it at its discretion.&lt;/p&gt;
&lt;p&gt;The following gist illustrates how the garbage collector treats soft references to objects. Notice that a garbage collection cycle which reclaims enough memory will leave the soft references unclaimed. When memory is scarce, however, soft references will be reclaimed by garbage collection.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/MonadicT/8655216.js&quot;&gt;
&lt;/script&gt;
&lt;p&gt;Here is the output produced by this code. You can see that soft references get cleared when memory is scarce.&lt;/p&gt;
&lt;p&gt;{% highlight bash %} $ java SoftReferenceTest Populating cache with 1000 objects Count of objects in cache after population: 1000 Count of objects in cache after System.gc: 1000 Triggering OutOfMemoryError Count of objects in cache after OOME: 10 $ {% endhighlight bash %}&lt;/p&gt;
&lt;p&gt;What would happen if we used &lt;em&gt;java.lang.ref.WeakReference&lt;/em&gt; instead of &lt;em&gt;SoftReference&lt;/em&gt;? The difference between soft and weak references is in how aggressively garbage collector reclaims them. JDK documentation for &lt;em&gt;WeakReference&lt;/em&gt; states that when garbage collector determines an object to be only weakly reachable, it will clear all weak references to that object. In contrast, when garbage collector determines an object to be softly reachable, it &lt;em&gt;may&lt;/em&gt; clear soft references to it.&lt;/p&gt;
&lt;p&gt;Here is another gist illustrating the difference between &lt;em&gt;SoftReference&lt;/em&gt; and &lt;em&gt;WeakReference&lt;/em&gt;. This gist replaces all occurrences of &lt;em&gt;SoftReference&lt;/em&gt; with &lt;em&gt;WeakReference&lt;/em&gt;. From the run output, you can see that the weak references to objects don't seem to survive the process of building the hash map and System.gc() call clears them immediately.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/MonadicT/8655216.js&quot;&gt;
&lt;/script&gt;
&lt;p&gt;Output from running the above gist.&lt;/p&gt;
&lt;p&gt;{% highlight bash %} $ java WeakReferenceTest Populating cache with 1000 objects Count of objects in cache after population: 278 Count of objects in cache after System.gc: 10 Triggering OutOfMemoryError Count of objects in cache after OOME: 10 $ {% endhighlight bash %}&lt;/p&gt;
&lt;p&gt;While $SoftReference$ looks great for building caches which automatically get smaller when memory becomes scarce, what are $WeakReferences$ good for? That is the subject of next section.&lt;/p&gt;
&lt;h3&gt;Weak Hash Map&lt;/h3&gt;
&lt;p&gt;The JDK documentation for $WeakReference$ says, weak references are used to build canonicalized mappings. A canonicalized mapping to an object always resolves to the same object. Consider the use case described at the beginning where we would like to associate additional information with an instance of a final class. Obviously, we should be able to retrieve the same information that we associated with the object at all times. While we could use a hash map with the object as key, all the housekeeping will have to be done by the developer.&lt;/p&gt;
&lt;p&gt;This where a $WeakReference$ proves handy. Instead of storing the key of the object directly, the key is wrapped in $WeakReference$. Say we have an object instance and with it we associate some information. We can query the weak hash map with the object as the key. If the object instance gets reclaimed, the only reference to it would be its use as a key in the weak hash map. As we saw earlier, garbage collector reclaims weak references right away and the key is put on a queue. When any operations are invoked on the weak hash map, all weak references waiting in the queue are removed from the map.&lt;/p&gt;
&lt;p&gt;Note that keys used in $WeakHashMap$ should not have any embedded strong references to them in the code and nor in the additional information we associated with it as the value. If the key is an interned string, the key will never become weakly referenced.&lt;/p&gt;
&lt;h3&gt;Phantom Reference&lt;/h3&gt;
&lt;p&gt;Now we come to the last scenario discussed in the beginning. Java objects can have a &lt;em&gt;finalize&lt;/em&gt; method in which you can perform cleanup actions. Java doesn't specify how soon the &lt;em&gt;finalize&lt;/em&gt; method will be invoked and which thread will execute the method. Joshua Bloch, author of &lt;em&gt;Effective Java&lt;/em&gt;, also points out the performance penalty of defining &lt;em&gt;finalize&lt;/em&gt; and strongly recommends avoiding it. &lt;em&gt;finalize&lt;/em&gt; seems to be one of the features of Java better left untouched. Thankfully, &lt;em&gt;PhantomReference&lt;/em&gt; is designed to address the problem of executing cleanup actions in a safe manner.&lt;/p&gt;
&lt;p&gt;Using &lt;em&gt;PhantomReference&lt;/em&gt; requires a little more effort than other reference types. For starters, phantom references don't return their referent ever. That prevents you from creating strong references to an object that has been finalized. It also requires you to subclass &lt;em&gt;PhantomReference&lt;/em&gt; and maintain data needed to cleanup the referent when it is reclaimed. Phantom references must also be associated with a reference queue and a background thread is required to monitor the queue for references enqueued by garbage collector and do the cleanup actions as necessary.&lt;/p&gt;
&lt;p&gt;Here is a gist which shows how phantom references should be used. Real code should probably be structured so that each object needing cleanup action should return an instance of &lt;em&gt;PhantomReference&lt;/em&gt; subclass encapsulating the cleanup data.&lt;/p&gt;
&lt;script src=&quot;https://gist.github.com/MonadicT/8695437.js&quot;&gt;
&lt;/script&gt;</description></item></channel></rss>